Problem: 
Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Solution 1:
class Solution {
    public boolean isAnagram(String s, String t) {
        char[] schar= s.toCharArray();
        char[] tchar= t.toCharArray();
        Arrays.sort(schar);
        Arrays.sort(tchar);
        String str1=String.valueOf(schar);
        String str2=String.valueOf(tchar);
        if(str1.equals(str2)){
            return true;
        }
        return false;
        
    }
}

Solution 2:
class Solution {
    public boolean isAnagram(String s, String t) {
        HashMap<Character,Integer> smap=new HashMap<>();
        int sl=s.length();
        int tl=t.length();
        if(sl!=tl){return false;}
        for(int i=0;i<sl;i++){
            smap.put(s.charAt(i),smap.getOrDefault(s.charAt(i),0)+1);
            smap.put(t.charAt(i),smap.getOrDefault(t.charAt(i),0)-1);
        }
        for(char c:smap.keySet()){
            if(smap.get(c)!=0){return false;}
        }
        
        return true;
    }
}

Solution 3: THIS IS CRAZY SOLUTION GIVES DIFFERENT RUNTIME EVERYTIME
class Solution {
        public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()){
            return false;
        }
            
        int [] count = new int[200];
         for(char c : s.toCharArray()){
             count[c]++;
        }
        //System.out.println(letters);
        for(char c : t.toCharArray()){
            //System.out.println("in t: "+ c + " " +letters[c]--);
            count[c]--;
        }
        for(int i : count){
            if(i != 0){
                return false;
            }
        }
        return true;
    }
}
