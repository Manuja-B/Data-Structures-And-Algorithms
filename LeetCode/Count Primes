Problem: 
Count the number of prime numbers less than a non-negative number, n.

Example:
Input: 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

Solution 1: Time limit exceeds for higher value (17 out 20 test cases pass)
public int countPrimes(int n) {
    n = n-1;
 
    ArrayList<Integer> primes = new ArrayList<Integer>();
 
    if(n<=1) 
        return 0;
    if(n==2)
        return 1;
    if(n==3)
        return 2;
 
    primes.add(2);
    primes.add(3);
 
    for(int i=4; i<=n; i++){
        boolean isPrime = true;
        for(int p: primes){
            int m = i%p;
            if(m==0){
                isPrime = false;
                break;
            }
        }
 
        if(isPrime){
            primes.add(i);
        }
    }
 
    return primes.size();
}

Solution 2: The Sieve of Eratosthenes uses an extra O(n) memory and its runtime complexity is O(n log log n).
public int countPrimes(int n) {
	if (n <= 2)
		return 0;
 
	// init an array to track prime numbers
	boolean[] primes = new boolean[n];
	for (int i = 2; i < n; i++)
		primes[i] = true;
 
	for (int i = 2; i <= Math.sqrt(n - 1); i++) {
	// or for (int i = 2; i <= n-1; i++) {
		if (primes[i]) {
			for (int j = i + i; j < n; j += i)
				primes[j] = false;
		}
	}
 
	int count = 0;
	for (int i = 2; i < n; i++) {
		if (primes[i])
			count++;
	}
 
	return count;
}

Solution 3: BEST
class Solution {
    public int countPrimes(int n) {
        if(n<3)
            return 0;
        int count=n/2;
        boolean prime[]=new boolean[n];
        for(int i=3;i*i<n;i+=2){
            if(prime[i])
                continue;
            for(int j=i*i;j<n;j+=2*i){
                if(!prime[j]){
                    count--;
                    prime[j]=true;
                }
            }
        }
        return count;
    }
