Problem: You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807. 

Solution:
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode reshead =new ListNode(0);
        ListNode res= reshead;
        while(l1 !=null || l2!=null){
            int x=0, y=0;
            if(l1!=null){
                x=l1.val;
            }
            if(l2!=null){
                y=l2.val;
            }
            int sum=carry+x+y;
            carry=sum/10;
            res.next= new ListNode(sum%10);
            res=res.next;
            if(l1 !=null) l1=l1.next;
            if(l2 !=null) l2=l2.next;
        }
        if(carry>0){
            res.next = new ListNode(carry);
        }
        
        return reshead.next;
    }
}
