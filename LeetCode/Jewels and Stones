Problem: You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.

The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" is considered a different type of stone from "A".

Example 1:

Input: J = "aA", S = "aAAbbbb"
Output: 3
Example 2:

Input: J = "z", S = "ZZ"
Output: 0
Note:

S and J will consist of letters and have length at most 50.
The characters in J are distinct.

Solution 1: Better solution
class Solution {
    public int numJewelsInStones(String J, String S) {
        int count=0;
        for(int i=0; i<S.length(); i++){
            for(int j=0; j<J.length(); j++){
              if(S.charAt(i)==J.charAt(j)){
                count ++;
            }  
            }
            
        }
        return count;
    }
}

Time Complexity: O(S.length*J.length)

Solution 2: 
class Solution {
    public int numJewelsInStones(String J, String S) {
        HashSet<Character> s=new HashSet<>();
        int count=0;
        
        for(int i=0; i<J.length(); i++){
            s.add(J.charAt(i));
        }
        
        for(int i=0; i<S.length(); i++){
              if(s.contains(S.charAt(i))){
                count ++;
              }
            }
        return count;
    }
}

Time Complexity: O(S.length+J.length)
Space Complexity: O(J.length)
