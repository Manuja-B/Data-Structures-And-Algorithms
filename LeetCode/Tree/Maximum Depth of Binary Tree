Problem:Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.


Solution:
Time complexity : we visit each node exactly once, thus the time complexity is \mathcal{O}(N)O(N), where NN is the number of nodes.

Space complexity : in the worst case, the tree is completely unbalanced, 
e.g. each node has only left child node, the recursion call would occur NN times (the height of the tree), 
therefore the storage to keep the call stack would be \mathcal{O}(N)O(N). But in the best case (the tree is completely balanced), 
the height of the tree would be \log(N)log(N). Therefore, the space complexity in this case would be \mathcal{O}(\log(N))O(log(N)).

class Solution {
  public int maxDepth(TreeNode root) {
    if (root == null) {
      return 0;
    } else {
      int left_height = maxDepth(root.left);
      int right_height = maxDepth(root.right);
      return java.lang.Math.max(left_height, right_height) + 1;
    }
  }
}

class Solution {
    public int maxDepth(TreeNode root) {
        Stack<TreeNode> s=new Stack<>();
        Stack<Integer> l=new Stack<>();
        if(root==null) return 0;
        s.push(root);
        l.push(1);
        int max=0;
        while(!s.isEmpty()){
            TreeNode curr=s.pop();
            int res=l.pop();
            max=Math.max(res,max);
            if(curr.left!=null){
                s.push(curr.left);
                l.push(res+1); //res++ doesn't work here as it's post increment. Also ++res doesn't work becuase we don't want to change the value of res but just add res+1 to the list
            }
            if(curr.right!=null){
                s.push(curr.right);
                l.push(res+1);
            }
            
        }
        return max;
    }
}
