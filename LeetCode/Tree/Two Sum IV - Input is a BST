Problem:
Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
 

Example 2:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum;
    public boolean findTarget(TreeNode root, int k) {
        Set<Integer> s=new HashSet();
        Queue <TreeNode> q=new LinkedList();
        q.add(root);
        while(!q.isEmpty()){
            if(q.peek()!=null){
                TreeNode n=q.remove();
                if(s.contains(k - n.val))
                    return true;
                s.add(n.val);
                q.add(n.right);
                q.add(n.left);
            }
           else
               q.remove();
        }
        return false;
    }
}
