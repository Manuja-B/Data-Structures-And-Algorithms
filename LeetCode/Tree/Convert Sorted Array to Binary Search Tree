Problem:
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 Solution: 
 class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        int len=nums.length-1;
        return sortedArrayBST(nums, 0, len);
    }
        public TreeNode sortedArrayBST(int[] nums, int start, int end){
            if(start>end) return null;
            int mid=(start+end)/2;
            TreeNode node=new TreeNode(nums[mid]);
            node.left= sortedArrayBST(nums, start, mid-1);
            node.right= sortedArrayBST(nums, mid+1, end);
            return node;
        }
    
}
//[1,2,3,4,5,6,7,8]
//Take middle node which is 4 and then everything to its left is left subtree and //vice versa

//O(n) because we are visiting every node
