Problem: Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Example 1:
Input: root = [2,1,3]
Output: [2,1,3]

Example 2:
Input: root = []
Output: []

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    String res;
    // Encodes a tree to a single string.
    //Used Preorder traversal here
    public String serialize(TreeNode root) {
        if(root==null) return "";  
        StringBuilder sb=new StringBuilder();
        Stack<TreeNode> stack=new Stack<>();
        stack.push(root);
        
        while(!stack.isEmpty()){
            TreeNode curr=stack.pop();
            sb.append(curr.val);
            sb.append(',');
            if(curr.right!=null){
                stack.push(curr.right);
            }
            if(curr.left!=null){
                stack.push(curr.left);
            }
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode construct(TreeNode root, int val)
    {
        //Conditions for BST
        if(root==null) return new TreeNode(val);
        
        if(root.val>val)
            root.left = construct(root.left, val);
        else
            root.right = construct(root.right, val);

        return root;
        
    }
    public TreeNode deserialize(String data) {
       if(data=="") return null;
        String[] a = data.split(",");
        TreeNode root=null;
        
          for(String str : a)
          {
              root = construct(root, Integer.parseInt(str));
          }
         
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;
