Problem: Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23

Solution: 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode root, int L, int R) {
        int sum=0;
        if(root==null){
            return sum;
        }
        
        //For tree traversal - BFS
        
        // Create a queue for BFS 
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            TreeNode curr=q.remove();
             if(curr.val>=L && curr.val<=R){
                sum=sum+curr.val;
            }
            if(curr.left!=null && curr.val>L){
                q.add(curr.left);
            }
            if(curr.right!=null && curr.val < R){
                q.add(curr.right);
            }
            
        }
        return sum;
    }
}
