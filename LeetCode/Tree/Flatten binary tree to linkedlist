Problem:Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6
          
Solution:
class Solution {
    public void flatten(TreeNode root) {
        if(root==null) return;
        
        TreeNode pre = new TreeNode(-1);        
        Stack<TreeNode> st = new Stack<>();
        
        st.add(root);
        while(!st.isEmpty())
        {
            TreeNode node = st.pop();
            pre.right = node;
            //don't forget to set left to null
            pre.left = null;
            if(node.right!=null) st.push(node.right);
            if(node.left!=null) st.push(node.left);
            pre = node;
        }    
    }
}
