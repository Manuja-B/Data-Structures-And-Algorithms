Problem: Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Solution 1: USING TWO STACKS
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null) return false;
        Stack<TreeNode> node=new Stack<>();
        Stack<Integer> sumstack=new Stack<>();
        node.add(root);
        sumstack.add(sum-root.val);
        while(!node.isEmpty()){
            TreeNode curr=node.pop();
            int currsum=sumstack.pop();
            if(curr.left==null && curr.right==null && currsum==0){
                return true;
            }
            if(curr.left!=null){
                node.add(curr.left);
                sumstack.add(currsum-curr.left.val);
            }
            if(curr.right!=null){
                node.add(curr.right);
                sumstack.add(currsum-curr.right.val);
            }
        }
        return false;
    }
}

Solution 2:
class Solution {
  public boolean hasPathSum(TreeNode root, int sum) {
    if (root == null)
      return false;

    sum -= root.val;
    if ((root.left == null) && (root.right == null))
      return (sum == 0);
    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);
  }
}
