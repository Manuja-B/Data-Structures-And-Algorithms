Problem: Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution{
    int l=0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
       l=postorder.length-1;
        return helper(inorder,0,inorder.length-1,postorder);
    }
    
    private TreeNode helper(int[] inorder, int start, int end, int[] postorder){
        if(start>end)
    	   return null;
        if(start==end)
            return new TreeNode(postorder[l--]);
        TreeNode root = new TreeNode(postorder[l--]);
        for(int i=start;i<=end;i++){
            if(inorder[i]==root.val){
                root.right = helper(inorder,i+1,end,postorder);
                root.left = helper(inorder,start,i-1,postorder); 
            }
            }
         return root;
    }
        
}
