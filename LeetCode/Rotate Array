Given an array, rotate the array to the right by k steps, where k is non-negative.

Follow up:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?
 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Solution 1: Brute force
class Solution {
    public void rotate(int[] nums, int k) {
        for(int i=0; i<k; i++){
            for(int j=nums.length-1; j>0; j--){
                int temp=nums[j];
                nums[j]=nums[j-1];
                nums[j-1]=temp;
            }
        }
    }
}

Solution 2: Optimized but with O(n) space for new array
 public void rotate(int[] nums, int k) {
        int[] temp=new int[nums.length];
        if(k>nums.length){
            k=k%nums.length;
        }
        for(int i=0; i<k; i++){
            temp[i]=nums[nums.length-k+i]; //5,6,7
        }
        int index=0;
        for(int i=k; i<nums.length; i++){
            temp[i]=nums[index++];
        }
        for(int i=0; i<temp.length; i++){
            nums[i]=temp[i];
        }
    }
}

Solution 3: Optimized with O(1) space
 public void rotate(int[] nums, int k) {
        int[] temp=new int[nums.length];
        if(k>nums.length){
            k=k%nums.length;
        }
        for(int i=0; i<k; i++){
            temp[i]=nums[nums.length-k+i]; //5,6,7
        }
        int index=0;
        for(int i=k; i<nums.length; i++){
            temp[i]=nums[index++];
        }
        for(int i=0; i<temp.length; i++){
            nums[i]=temp[i];
        }
    }
}

