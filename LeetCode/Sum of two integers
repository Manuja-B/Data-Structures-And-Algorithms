Problem: Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.

Example 1:

Input: a = 1, b = 2
Output: 3
Example 2:

Input: a = -2, b = 3
Output: 1

Solution 1: SLOW
class Solution {
    public int getSum(int a, int b) {
        if (b > 0) { 
            while (b > 0) { 
                a++; 
                b--; 
            } 
        } 
        if (b < 0) { // when 'b' is negative 
            while (b < 0) { 
                a--; 
                b++; 
            } 
        } 
        return a;
    }
}

Solution 2:

1. Using AND we find position where carry is generated.
2. Using XOR we actually add the bits
3. Using leftshift << we turn the carry to what I want to apply for the next iteration
Ex: a= 1 which is 0001 and b=3, which is 0011
1. AND gives 0001
2. XOR gives 0010
3. << gives 0010
Now add carry and sum(XOR result) 0010^0010 = 0000  0010&&0010= 0010 and left shifting gives 0100
Thus final sum is 0000^0100= 0100 = 4

class Solution {
    public int getSum(int a, int b) {
        while(b != 0){
            int carry = a & b;
            a = a ^ b;
            b = carry << 1;
        }
        return a;
    }
}
