Problem: A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, 
and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

Solution: (29%, not that optimal, use two pointer for optimal solution)
class Solution {
    public List<Integer> partitionLabels(String S) {
        int idx=0;
        List<Integer> l=new ArrayList<>();
        for(int i=0; i<S.length(); i++){
            idx=S.lastIndexOf(S.charAt(i));
           for(int j=i+1; j<idx; j++){
                int in=S.lastIndexOf(S.charAt(j));
                if(in>idx){
                  idx=in;  
                }
            }  
            String str=S.substring(i,idx);
            l.add(str.length()+1);
            i=i+str.length();
        }
        return l;
    }
}
