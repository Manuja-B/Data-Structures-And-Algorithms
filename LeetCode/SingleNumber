Problem:
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

Solution1:
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> hm =new HashMap<>();
        for(int i=0; i<nums.length; i++){
            if(hm.containsKey(nums[i])){
                hm.put(nums[i],(hm.get(nums[i]))+1);
            }
            else{
                hm.put(nums[i],1);
            }
        }
        for(Map.Entry<Integer, Integer> e:hm.entrySet()){
            if(e.getValue()==1){
               return(e.getKey());
            }
            
        }
        return -1;
        
    }
}

Time Complexity: O(n) Space Complexity: O(n) for HashMap
To decrease the runtime, you can check if HM doesn't contain that key and then put and remove if it contains. 
In this way your hashmap will have entry of key with frequecy 1
Thus:

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(!hm.containsKey(nums[i])){
                hm.put(nums[i],1);
            }
            else{
               hm.remove(nums[i]);
            }
        }
       Integer[] array = (hm.keySet()).toArray(new Integer[0]);
        return (array[0]);
    }
    
   
}

Solution2:
class Solution {
    public int singleNumber(int[] nums) {
        int res=0;
        for(int i=0; i<nums.length; i++){
            res ^=nums[i];
        }
        return res;
    }
}
        
        
