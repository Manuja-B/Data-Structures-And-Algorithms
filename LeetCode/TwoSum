Problem: Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Solution1: 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res=new int[2];
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i]+nums[j]==target){
                    res[0]=i;
                    res[1]=j;
                    return res;
                }
            }
        }
        return null;
    }
}

Solution2:
class Solution {
    public int[] twoSum(int[] nums, int target) {
       HashMap<Integer, Integer> hm=new HashMap<> ();
        int[] res=new int[2];
        
        for(int i=0; i<nums.length; i++){
            int diff=target-nums[i];
            if(hm.containsKey(diff)){
                res[0]=hm.get(diff);
                res[1]=i;
            }
            else{
                hm.put(nums[i], i);
            }
        }
        return res;
    }
}

Note: if the array is sorted, you can simply use two pointers start and end. if sum of these to greater than target, decrement end
and if sum is less increment start
