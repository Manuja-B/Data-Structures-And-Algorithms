Problem: Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

Solution:
class Solution {
    
    
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> paths=new ArrayList<>();
        List<Integer> pathnodes=new ArrayList<>();
            
        findPaths(root, sum, pathnodes, paths);
        return paths;
    } 
    public void findPaths(TreeNode root, int sum, List<Integer> curr, List<List<Integer>> paths){
        if(root==null){
            return;
        }
        curr.add(root.val);
        if(root.val==sum && root.left==null && root.right==null){
            paths.add(curr);
            return;
        }
        findPaths(root.left, sum-root.val, new ArrayList<Integer>(curr), paths);
        findPaths(root.right, sum-root.val, new ArrayList<Integer>(curr), paths);
    }
}
