Problem: Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

Solution 1: Not good
class Solution {
    public int firstUniqChar(String s) {
        LinkedHashMap<Character, Integer> hm=new LinkedHashMap<>();
        for(int i=0; i<s.length(); i++){
            char c=s.charAt(i);
            if(hm.containsKey(c)){
              hm.put(c, hm.get(c)+1);  
            }
            else{
                hm.put(c,1);
            }
        }
        System.out.println(hm.toString());
        for(Map.Entry<Character, Integer> e:hm.entrySet()){
            if(e.getValue()==1){
                System.out.println(e.getKey());
                return s.indexOf(e.getKey());
            }
        }
        return -1;
    }
}

Solution 2: Best
class Solution {
    public int firstUniqChar(String s) {
        if(s==null || s.length()==0) return -1;
        
        int output = Integer.MAX_VALUE;
        for(char c='a'; c<='z'; c++){
            int pop = s.indexOf(c);
            if(pop != -1 && pop == s.lastIndexOf(c)){
                output = Math.min(pop, output);
            }
        }
        return output==Integer.MAX_VALUE?-1:output;
    }
}
